// Copyright Â© 2020 Peter Cerno. All rights reserved.

syntax = "proto2";

package trader;

// Base (crypto) currency traded at at a specific price and time.
message PriceRecord {
  // UNIX timestamp (in seconds).
  optional int32 timestamp_sec = 1;
  // Base (crypto) currency price (e.g. BTC/USD price).
  optional float price = 2;
  // Traded base (crypto) currency volume.
  optional float volume = 3;
}

// Open, high, low, and close prices for specific time interval.
// The duration of the time interval is assumed implicitly.
message OhlcTick {
  // UNIX timestamp (in seconds) of the start of the time interval.
  optional int32 timestamp_sec = 1;
  // Opening base (crypto) currency price at the start of the time interval.
  optional float open = 2;
  // Highest base (crypto) currency price during the time interval.
  optional float high = 3;
  // Lowest base (crypto) currency price during the time interval.
  optional float low = 4;
  // Closing base (crypto) currency price at the end of the time interval.
  optional float close = 5;
  // Total traded volume during the time interval.
  optional float volume = 6;
}

// This is used to provide additional information (signals) to the trader.
// Note that the interpretation of the signals is up to the trader itself.
message SideInputRecord {
  // UNIX timestamp (in seconds).
  optional int32 timestamp_sec = 1;
  // List of signals. We assume that all signals are floats and that every
  // SideInputRecord has the same number of signals.
  repeated float signal = 2;
}

// Transaction fee configuration.
message FeeConfig {
  // Relative transaction fee.
  optional float relative_fee = 1;
  // Fixed transaction fee in quote currency.
  optional float fixed_fee = 2;
  // Minimum transaction fee in quote currency.
  optional float minimum_fee = 3;
}

// Trader account configuration.
message AccountConfig {
  // Starting base (crypto) currency balance (e.g. BTC balance).
  optional float start_base_balance = 1;
  // Starting quote balance (e.g. USD balance).
  optional float start_quote_balance = 2;
  // Smallest indivisible unit for base (crypto) currency balance.
  // Not used if zero.
  optional float base_unit = 3;
  // Smallest indivisible unit for quote balance.
  // Not used if zero.
  optional float quote_unit = 4;
  // Transaction fee configuration for market orders.
  optional FeeConfig market_order_fee_config = 5;
  // Transaction fee configuration for stop orders.
  optional FeeConfig stop_order_fee_config = 6;
  // Transaction fee configuration for limit orders.
  optional FeeConfig limit_order_fee_config = 7;
  // Liquidity for executing market (stop) orders w.r.t. the given OHLC tick
  // from the interval [0; 1].
  // If 1.0 then the market (stop) order will be executed at the opening price
  // (stop order price). This is the best price for the given order.
  // If 0.0 then the buy (sell) order will be executed at the highest (lowest)
  // price of the given OHLC tick. This is the worst price for the given order.
  // Anything in between 0.0 and 1.0 will be linearly interpolated.
  optional float market_liquidity = 8;
  // Fraction of the OHLC tick volume that will be used to fill the limit order.
  // If the actual traded volume * max_volume_ratio is less than the limit
  // order size, then the limit order will be filled only partially.
  // Not used if zero.
  optional float max_volume_ratio = 9;
}

// Exchange order.
message Order {
  enum Type {
    MARKET = 0;  // Market order.
    STOP = 1;    // Stop order.
    LIMIT = 2;   // Limit order.
  }
  enum Side {
    BUY = 0;     // Buy order.
    SELL = 1;    // Sell order.
  }
  // Type of the order. Order is invalid if the order type is missing.
  optional Type type = 1;
  // Side of the order. Order is invalid if the order side is missing.
  optional Side side = 2;
  oneof oneof_amount {
    // The amount of base (crypto) currency to by buy / sell.
    float base_amount = 3;
    // The (maximum) amount of quote to be spent on buying (or to be received
    // when selling) the base (crypto) currency.
    // The actual traded amount might be smaller due to exchange fees.
    float quote_amount = 4;
  }
  // Target price at which to execute the order. Ignored for market orders.
  // The actual traded price might differ for stop orders.
  optional float price = 5;
}
