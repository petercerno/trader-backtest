syntax = "proto2";

package trader;

// Security (crypto currency) price (quoted in base currency) at specific time.
message PriceRecord {
  // UNIX timestamp (in seconds).
  optional int32 timestamp_sec = 1;
  // Security (crypto currency) price (quoted in base currency) (e.g. BTC/USD).
  optional float price = 2;
  // Traded security (crypto currency) volume.
  optional float volume = 3;
}

// Open, high, low, and close prices (quoted in base currency) for specific time
// interval. The duration of the time interval is assumed implicitly.
message OhlcTick {
  // UNIX timestamp (in seconds) of the start of the time interval.
  optional int32 timestamp_sec = 1;
  // Opening security (crypto currency) price at the start of the time interval.
  optional float open = 2;
  // Highest security (crypto currency) price during the time interval.
  optional float high = 3;
  // Lowest security (crypto currency) price during the time interval.
  optional float low = 4;
  // Closing security (crypto currency) price at the end of the time interval.
  optional float close = 5;
  // Total traded volume during the time interval.
  optional float volume = 6;
}

// Exchange order.
message Order {
  enum Type {
    MARKET = 0;  // Market order.
    LIMIT = 1;   // Limit order.
    STOP = 2;    // Stop order.
  }
  enum Side {
    BUY = 0;     // Buy order.
    SELL = 1;    // Sell order.
  }
  // Type of the order. Order is invalid if the order type is missing.
  optional Type type = 1;
  // Side of the order. Order is invalid if the order side is missing.
  optional Side side = 2;
  // Target price at which to execute the order. Ignored for market orders.
  // The actual traded price might differ for stop orders.
  optional float price = 3;
  // Traded security (crypto currency) amount for sell orders. Ignored for buy
  // orders. The actual traded amount might be smaller due to exchange fees.
  optional float security_amount = 4;
  // Traded cash amount for buy orders. Ignored for sell orders.
  // The actual traded amount might be smaller due to exchange fees.
  optional float cash_amount = 5;
}

// Exchange account configuration.
message ExchangeAccountConfig {
  // Starting security (crypto currency) balance (e.g. BTC balance).
  optional float start_security_balance = 1;
  // Starting cash balance in base currency (e.g. USD balance).
  optional float start_cash_balance = 2;
  // Smallest indivisible unit for security (crypto currency) balance.
  // Not used if zero.
  optional float security_balance_unit = 3;
  // Smallest indivisible unit for cash balance. Not used if zero.
  optional float cash_balance_unit = 4;
  // Transaction fee configuration.
  message TransactionFeeConfig {
    // Relative transaction fee.
    optional float relative_fee = 1;
    // Fixed transaction fee in base currency.
    optional float fixed_fee = 2;
    // Minimum transaction fee in base currency.
    optional float minimum_fee = 3;
  }
  // Transaction fee configuration for market orders.
  optional TransactionFeeConfig market_order_fee_config = 5;
  // Transaction fee configuration for limit orders.
  optional TransactionFeeConfig limit_order_fee_config = 6;
  // Transaction fee configuration for stop orders.
  optional TransactionFeeConfig stop_order_fee_config = 7;
  // Accuracy of executing market orders w.r.t. the OhlcTick.
  // If 1.0 then the market order will be executed at the OhlcTick open price.
  // If 0.0 then the buy (sell) market order will be executed at the highest
  // (lowest) price of the given OhlcTick.
  optional float market_order_accuracy = 8;
  // Accuracy of executing stop orders at their target price.
  // If 1.0 then the stop order will be executed exactly at its target price.
  // If 0.0 then the buy (sell) stop order will be executed at the highest
  // (lowest) price of the given OhlcTick.
  optional float stop_order_accuracy = 9;
  // Ratio of the OhlcTick volume that is used to fill the limit order.
  // If the actual traded volume * limit_order_fill_volume_ratio is less than
  // the limit order size, then the limit order is filled only partially.
  // Not used if zero.
  optional float limit_order_fill_volume_ratio = 10;
}

// Exchange account state at the end of the OhlcTick time interval.
message ExchangeAccountState {
  // OhlcTick.
  optional OhlcTick ohlc_tick = 1;
  // Active orders available at the beginning of the OhlcTick.
  repeated Order order = 2;
  // Number of executed orders (including partially filled limit orders).
  optional int32 executed_orders = 3;
  // Traded security (crypto currency) amount over all executed orders
  // (including partially filled limit orders).
  optional float traded_security_amount = 4;
  // Transaction fee (in base currency) over all executed orders (including
  // partially filled limit orders).
  optional float transaction_fee = 5;
  // Total accumulated number of executed orders over time.
  optional int32 accumulated_executed_orders = 6;
  // Total accumulated traded security (crypto currency) amount over time.
  optional float accumulated_security_amount = 7;
  // Total accumulated transaction fee over time (in base currency).
  optional float accumulated_fee = 8;
  // Security (crypto currency) balance at the end of the OhlcTick.
  optional float security_balance = 9;
  // Cash balance (in base currency) at the end of the OhlcTick.
  optional float cash_balance = 10;
  // Total value (in base currency) at the end of the OhlcTick.
  optional float value = 11;
}

// Evaluation configuration.
message EvalConfig {
  // Starting UNIX timestamp (in seconds).
  optional int32 start_timestamp_sec = 1;
  // Ending UNIX timestamp (in seconds).
  optional int32 end_timestamp_sec = 2;
  // Length of evaluation period (in months).
  optional int32 evaluation_period_months = 3;
}

// Trader evaluation result w.r.t. a fixed configuration.
message EvalResult {
  // Exchange account configuration.
  optional ExchangeAccountConfig exchange_account_config = 1;
  // Evaluation configuration.
  optional EvalConfig eval_config = 2;
  // String representation of the trader (its configuration).
  optional string trader = 3;
  // Trader evaluation over a specific period.
  message Period {
    // Starting UNIX timestamp (in seconds) of the evaluation period (included).
    optional int32 start_timestamp_sec = 1;
    // Ending UNIX timestamp (in seconds) of the evaluation period (excluded).
    optional int32 end_timestamp_sec = 2;
    // Final percentual gain of the trader (after fees).
    optional float trader_final_gain = 3;
    // Final value in base currency of the trader (after fees).
    optional float trader_final_value = 4;
    // Total number of executed orders.
    optional int32 total_executed_orders = 5;
    // Total traded security (crypto currency) amount.
    optional float total_security_amount = 6;
    // Total trader fees in base currency.
    optional float total_fee = 7;
    // Final percentual gain of the baseline method.
    optional float base_final_gain = 8;
    // Final value in base currency of the baseline method.
    optional float base_final_value = 9;
    // Exchange account states corresponding to this evaluation period.
    repeated ExchangeAccountState exchange_account_state = 10;
  }
  // Trader evaluation over multiple periods.
  repeated Period period = 4;
  // Trader evaluation score.
  optional float score = 5;
  // Average percentual gain of the trader (after fees).
  optional float avg_trader_gain = 6;
  // Average total number of executed orders.
  optional float avg_total_executed_orders = 7;
  // Average total traded security (crypto currency) amount.
  optional float avg_total_security_amount = 8;
  // Average total trader fees in base currency.
  optional float avg_total_fee = 9;
  // Average percentual gain of the baseline method.
  optional float avg_base_gain = 10;
}

// Stop trader configuration.
message StopTraderConfig {
  // Margin for setting the stop order price w.r.t. the current price.
  optional float stop_order_margin = 1;
  // Margin for moving the stop order price w.r.t. the current price.
  optional float stop_order_move_margin = 2;
  // Maximum relative stop order price increase per day.
  optional float stop_order_increase_per_day = 3;
  // Maximum relative stop order price decrease per day.
  optional float stop_order_decrease_per_day = 4;
}

// Limit trader configuration.
message LimitTraderConfig {
  // Blending factor for the exponential price smoothing.
  optional float alpha_per_hour = 1;
  // Margin for placing the limit order price w.r.t. the smoothed price.
  optional float limit_order_margin = 2;
}

// Limit trader V2 configuration.
message LimitTraderV2Config {
  // Blending factor for the exponential price smoothing.
  optional float alpha_per_hour = 1;
  // Margin for placing the limit buy order price w.r.t. the smoothed price.
  optional float limit_buy_margin = 2;
  // Margin for placing the limit sell order price w.r.t. the smoothed price.
  optional float limit_sell_margin = 3;
}
